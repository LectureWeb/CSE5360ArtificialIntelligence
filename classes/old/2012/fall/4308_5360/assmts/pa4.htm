<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Programming Assignment 4</title>

</head>
<body>
<h1>
Programming Assignment 4</h1>
<h3>
Due dates:<br>
Interim report: Wednesday 11/07/2012, 11:59pm<br>
Full assignment: Sunday 11/11/2012, 11:59pm.</h3>
<h3> Task </h3>
The task in this programming assignment is to design appropriate
descriptions of facts, actions, and goals, using the STRIPS language,
for two planning problems: the <a href="http://en.wikipedia.org/wiki/Tower_of_Hanoi">Tower of
Hanoi problem</a>, and the 7-puzzle problem (a variation of the
8-puzzle problem where two squares are clear instead of one). You will
use your descriptions as inputs to a Graphplan implementation. If your
descriptions are correct, Graphplan will produce appropriate plans.
<p></p>
<h3> Compiling and Running the Software </h3>
The Graphplan software can be downloaded from <a href="pa4_files/graphplan.zip">graphplan.zip</a>. See
the README file in that package for additional information. To compile
the software on <tt>omega</tt>, unzip the directory, and,
from that directory, type
<pre>make graphplan<br></pre>
Once the program compiles, it can be invoked from the commandline as
follows:
<pre>graphplan -o [operators_file] -f [facts_file]<br></pre>
For example:
<pre>graphplan -o block_ops.txt -f block_facts3.txt<br></pre>
<ul>
<li>Argument <tt>operators_file</tt> specifies the
location of a text file containing definitions of actions. For example,
see <a href="pa4_files/block_ops.txt">block_ops.txt</a>
for definitions of actions appropriate for the blocks world.
</li>
<li>Argument <tt>facts_file</tt> specifies the
location of a text file containing definitions of facts about the
environment, including objects (and types for those objects), general
predicates that are always true, initial state description, and goal
description. For example, see <a href="pa4_files/block_facts2.txt">block_facts2.txt</a>,
<a href="pa4_files/block_facts3.txt">block_facts3.txt</a>,
and <a href="pa4_files/block_facts4.txt">block_facts4.txt</a>
for example fact descriptions for the blocks world.
</li>
</ul>
Once you start running the software, it will ask you three questions.
Just hit enter for each question, so as to use the default settings. If
your descriptions of actions and facts are correct, the program will
print out a plan achieving the stated goal.
<p>Note that the preconds in each fact file will contain both
statements that are always true in that domain (i.e., in the Tower of
Hanoi domain or the 7-puzzle domain), and statements that simply
describe the initial state for that specific planning problem. In
addition to the facts files for the specific planning problems you are
given, you will have to create a separate text file that includes all
the statements that must be present in ANY facts file for that domain.
</p>
<h3>Tower of Hanoi Description</h3>
A description of the Tower of Hanoi domain can be found at <a href="http://en.wikipedia.org/wiki/Tower_of_Hanoi">Wikipedia</a>.
In all problems that your program will be tested with there will be
five discs (called disk1, disk2, disk3, disk4, disk5) and three pegs
(called A, B, C). In all your facts files you will have to include both
a common part (defining objects and relations among objects) and a
plan-specific part (describing the initial state and goal for each
plan). Note that some of the five disks may not appear in some of the
planning problems.
<p>The three planning problems you have to solve are:
</p>
<p><strong>Problem 1</strong>
</p>
<pre>initial state:<br>(on disk1 disk2)<br>(on disk2 A) <br>(clear disk1)<br>(clear B)<br>(clear C) <br><br>goal:<br>(on disk1 B)<br></pre>
<strong>Problem 2</strong>
<pre>initial state:<br>(on disk1 disk2) <br>(on disk2 disk3) <br>(on disk3 A)<br>(clear disk1)<br>(clear B)<br>(clear C) <br><br>goal:<br>(on disk1 disk2)<br>(on disk2 disk3) <br>(on disk3 B)<br></pre>
<strong>Problem 3</strong>
<pre>initial state:<br>(on disk1 disk2) <br>(on disk2 disk3)<br>(on disk3 disk4)<br>(on disk4 disk5)<br>(on disk5 C) <br>(clear disk1) <br>(clear A) <br>(clear B)<br><br>goal:<br>(on disk1 disk2) <br>(on disk2 disk3)<br>(on disk3 disk4)<br>(on disk4 disk5)<br>(on disk5 A) <br></pre>
<h3>7-puzzle Description</h3>
7-puzzle is like 8-puzzle, except that there are only pieces numbered
from 1 to 7 (not from 1 to 8), and there are two clear squares on the
board. At any move, we can move a numbered piece to an adjacent clear
square.
<p>The three planning problems you have to solve are (X indicates
a clear square):
</p>
<p><strong>Problem 1</strong>
</p>
<pre>initial state:<br>123<br>456<br>7XX<br><br>goal:<br>123<br>X56<br>4X7<br></pre>
<strong>Problem 2</strong>
<pre>initial state:<br>123<br>456<br>7XX<br><br>goal:<br>XX1<br>234<br>567<br></pre>
<strong>Problem 3</strong>
<pre>initial state:<br>XX7<br>654<br>321<br><br>goal:<br>123<br>456<br>7XX<br></pre>
<h3>Interim report </h3>
The interim report is once again mandatory. The interim report should
be submitted via e-mail to the instructor and the TA, and should
contain the following:
<ul>
<li>On subject line: "CSE 4308/5360 - Programming Assignment 4
- Interim report".
</li>
<li>On body of message: Your name and UTA ID (all 10 digits, no
spaces).
</li>
<li>On body of message, or as an attachment (in text, Word,
PDF, or OpenOffice format): a description (as brief or long as you
want) of what you have done so far for the assignment, and any
difficulties/bottlenecks you may have reached (in case you encounter
such difficulties, it is highly recommended to contact the instructor
and/or TA for help).
</li>
</ul>
For purposes of grading, it is absolutely fine if your interim report
simply states that you have done nothing so far (you still get the 10
points allocated for the interim report, AS LONG AS YOU SUBMIT THE
REPORT ON TIME). At the same time, starting early and identifying
potential bottlenecks by the deadline for the interim report is
probably a good strategy for doing well in this assignment.
<h3> Grading </h3>
The assignment will be graded out of 100 points. 50 points will
correspond to your solutions for the Tower of Hanoi world, and 50
points will correspond to your solutions for the 7-puzzle problem.
Specifically, the point allocation is:
<ul>
<li> 10 points: submitting the interim report on time.
</li>
<li> 60 points: defining facts and actions correctly. The
language that you define (i.e., the actions, objects, and general
statements that are always true) should be sufficient not only for the
specific plans that you are required to construct, but also for any
other planning problems that we can define in the Tower of Hanoi domain
or the 7-puzzle domain. As part of grading, we will also test your
solutions on planning problems that we will make up.
</li>
<li> 5 points: solving any one of the six planning problems you
are given (three for the Tower of Hanoi domain, three for the 7-puzzle
domain). If you solve al 6 correctly, you get 30 points.
</li>
</ul>
<h3>How to submit</h3>
Submissions should be made using <a href="http://elearn.uta.edu/">Blackboard</a>.
<p>Submit a ZIPPED directory called&nbsp;<tt>&lt;name&gt;-programming4.zip</tt>
(no other
forms of compression accepted, contact the instructor or TA if you do
not know how to produce a ZIP file) that contains the entire Graphplan
directory, including code, binaries (that work on omega), and text
files. The submission should also contain a file called
readme.txt,
which should specify precisely:</p>
<ul>
<li>Name and UTA ID of the student. </li>
<li>Location of the action files for each domain.</li>
<li>Location of a file containing object descriptions and
statements that are always true in each domain. </li>
<li>Command lines for how to run Graphplan for each of the six
planning problems that you have to solve.</li>
</ul>
Insufficient or unclear instructions will be penalized by up to 20
points.
Code that does not run on omega machines gets AT MOST half credit (50
points).
<h3>Submission checklist</h3>
<ul>
<li> DID YOU INCLUDE files defining actions for each domain?
</li>
<li> DID YOU INCLUDE files containing object descriptions and
statements that are always true in each domain?
</li>
<li> DID YOU INCLUDE a file containing the appropriate fact
definitions for each of the six planning problems?
</li>
<li> Is the code running on omega?
</li>
<li> Is the submitted zipped file called&nbsp;<tt>&lt;name&gt;-rogramming4.zip</tt>?
</li>
</ul>
<img onselect="return false" onselectstart="return false" id="zoomIcon" src="chrome-extension://kdfgigbjonaniokmpfflpflkhahhbaej/images/zoom.png" style="cursor: pointer; position: fixed; right: 50px; top: 25px; width: 70px; height: 70px; z-index: 10000; display: none;"><input id="zoomLabel" style="border: 3px solid rgb(102, 102, 102); padding: 3px; background-color: gray; color: white; font-size: 10pt; font-family: 'MS Sans Serif'; font-weight: bolder; text-align: center; cursor: pointer; position: fixed; right: 80px; top: 75px; width: 50px; height: 20px; z-index: 10000; opacity: 0.2; display: none;" value="100 %" title=" • Scroll up to Zoom In • Scroll down to Zoom out • Double click to hide this • Holding Left mouse button and Right click to show it again">
<div id="sbi_camera_button" class="sbi_search" style="border: medium none ; margin: 0px; padding: 0px; left: 0px; top: 0px; position: absolute; width: 29px; height: 27px; z-index: 2147483647; display: none;"></div>
</body></html>